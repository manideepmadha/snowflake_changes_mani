name: Code Quality Check

on:
  pull_request:
    branches: [main] # or any other branches you want to check
permissions:
  contents: read
  pull-requests: write

jobs:
  pythonFiles: # List out changed/added Python files
    runs-on: ubuntu-latest
    outputs:
      pythonfiles: ${{ steps.set-python-files.outputs.pythonfiles }}

    steps:
      - name: Clone Repo
        uses: actions/checkout@v3

      - name: Get changed/added files
        run: |
          git fetch --no-tags --prune --depth=1 origin +refs/heads/${{ github.event.pull_request.base.ref }}:refs/remotes/origin/${{ github.event.pull_request.base.ref }}

      - name: Get Python files
        id: set-python-files
        run: echo "pythonfiles=$(git diff --name-only --diff-filter=ACMRT origin/${{ github.event.pull_request.base.ref }} HEAD -- '*.py' | uniq | jq -R -s -c 'split("\n")[:-1]' | jq -r '.[] | ("./" + .)' | jq -R -r -s -c 'split("\n")[:-1] | join(" ")')" >>$GITHUB_OUTPUT

      - name: Print files to be scanned
        run: echo ${{ steps.set-python-files.outputs.pythonfiles }}

  Code_Analysis:
    runs-on: ubuntu-latest
    needs: pythonFiles
    if: ${{ needs.pythonFiles.outputs.pythonfiles != '' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint radon pyflakes bandit vulture

      - name: Analyze code
        run: |
          set -e
          echo "Analyzing files: ${{ needs.pythonFiles.outputs.pythonfiles }}"

          # Ensure the files list is not empty
          if [[ -z "${{ needs.pythonFiles.outputs.pythonfiles }}" ]]; then
            echo "No Python files detected for analysis."
            exit 0
          fi

          # Run analysis tools
          echo "Running Pylint..."
          pylint --disable=R,C --output-format=text ${{ needs.pythonFiles.outputs.pythonfiles }} > pylint_report.txt || echo "Pylint failed." > pylint_report.txt

          echo "Running Radon CC..."
          radon cc ${{ needs.pythonFiles.outputs.pythonfiles }} > cc_report.txt || echo "Radon CC failed." > cc_report.txt

          echo "Running Pyflakes..."
          pyflakes ${{ needs.pythonFiles.outputs.pythonfiles }} > pyflakes_report.txt || echo "Pyflakes failed." > pyflakes_report.txt

          echo "Running Bandit..."
          bandit -r ${{ needs.pythonFiles.outputs.pythonfiles }} > bandit_report.txt || echo "Bandit failed." > bandit_report.txt

          echo "Running Vulture..."
          vulture ${{ needs.pythonFiles.outputs.pythonfiles }} > vulture_report.txt || echo "Vulture failed." > vulture_report.txt

          echo "Analysis Complete. Reports generated."

      - name: Calculate code rating
        run: |
          set -e

          # Extract scores with fallback values
          pylint_score=$(grep "Your code has been rated at" pylint_report.txt | awk '{print $6}' || echo "0")
          avg_complexity=$(grep "Average complexity" cc_report.txt | awk '{print $3}' || echo "0")
          bandit_issues=$(grep -c "Issue:" bandit_report.txt || echo "0")

          echo "Pylint Score: $pylint_score"
          echo "Average Complexity: $avg_complexity"
          echo "Bandit Issues: $bandit_issues"

          # Default rating logic with partial success consideration
          if [[ "$pylint_score" =~ ^[0-9]+([.][0-9]+)?$ ]] && [[ "$avg_complexity" =~ ^[0-9]+([.][0-9]+)?$ ]]; then
            if [[ $(echo "$pylint_score > 9" | bc -l) -eq 1 ]] && [[ $(echo "$avg_complexity < 5" | bc -l) -eq 1 ]] && [[ $bandit_issues -eq 0 ]]; then
              rating="★★★★★"
              rating_color="green"
              reason="Excellent Pylint score, low complexity, and no security issues."
            elif [[ $(echo "$pylint_score > 8" | bc -l) -eq 1 ]] && [[ $(echo "$avg_complexity < 10" | bc -l) -eq 1 ]] && [[ $bandit_issues -lt 5 ]]; then
              rating="★★★★"
              rating_color="green"
              reason="Good Pylint score, moderate complexity, and minor security issues."
            elif [[ $(echo "$pylint_score > 6" | bc -l) -eq 1 ]] && [[ $bandit_issues -lt 10 ]]; then
              rating="★★★"
              rating_color="yellow"
              reason="Moderate Pylint score with manageable security issues."
            else
              rating="★★"
              rating_color="red"
              reason="Poor quality code with high complexity or security issues."
            fi
          else
            rating="★"
            rating_color="red"
            reason="Failed checks or invalid inputs for some tools."
          fi

          echo "Code Rating: $rating ($reason)" > code_rating.txt
          echo "Rating Color: $rating_color" > rating_color.txt
          echo "Code Rating: $rating ($reason)"
          echo "Rating Color: $rating_color"

      - name: Create PR comment
        uses: actions/github-script@v6
        with:
          token: ${{ secrets.PAT_GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            const pylintReport = fs.existsSync('pylint_report.txt') ? fs.readFileSync('pylint_report.txt', 'utf8') : "Pylint report missing.";
            const ccReport = fs.existsSync('cc_report.txt') ? fs.readFileSync('cc_report.txt', 'utf8') : "Radon CC report missing.";
            const pyflakesReport = fs.existsSync('pyflakes_report.txt') ? fs.readFileSync('pyflakes_report.txt', 'utf8') : "Pyflakes report missing.";
            const banditReport = fs.existsSync('bandit_report.txt') ? fs.readFileSync('bandit_report.txt', 'utf8') : "Bandit report missing.";
            const vultureReport = fs.existsSync('vulture_report.txt') ? fs.readFileSync('vulture_report.txt', 'utf8') : "Vulture report missing.";
            const codeRating = fs.existsSync('code_rating.txt') ? fs.readFileSync('code_rating.txt', 'utf8') : "Code rating missing.";
            const ratingColor = fs.existsSync('rating_color.txt') ? fs.readFileSync('rating_color.txt', 'utf8').trim() : "yellow";

            const commentBody = `
              <table border="1" style="border-collapse: collapse;">
                <tr><td style="background-color:${ratingColor};"><strong>Rating:</strong></td><td>${codeRating}</td></tr>
                <tr><td><strong>Pylint Report</strong></td><td>${pylintReport.slice(0, 200)}</td></tr>
                <tr><td><strong>Radon CC Report</strong></td><td>${ccReport.slice(0, 200)}</td></tr>
                <tr><td><strong>Pyflakes Report</strong></td><td>${pyflakesReport.slice(0, 200)}</td></tr>
                <tr><td><strong>Bandit Report</strong></td><td>${banditReport.slice(0, 200)}</td></tr>
                <tr><td><strong>Vulture Report</strong></td><td>${vultureReport.slice(0, 200)}</td></tr>
              </table>
            `;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });


      