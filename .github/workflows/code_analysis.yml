name: Code Quality Check

on:
  pull_request:
    branches: [main] # or any other branches you want to check
permissions:
  contents: read
  pull-requests: write

jobs:
  pythonFiles: # List out changed/added Python files
    runs-on: ubuntu-latest
    outputs:
      pythonfiles: ${{ steps.set-python-files.outputs.pythonfiles }}

    steps:
      - name: Clone Repo
        uses: actions/checkout@v3

      - name: Get changed/added files
        run: |
          git fetch --no-tags --prune --depth=1 origin +refs/heads/${{ github.event.pull_request.base.ref }}:refs/remotes/origin/${{ github.event.pull_request.base.ref }}

      - name: Get Python files
        id: set-python-files
        run: echo "pythonfiles=$(git diff --name-only --diff-filter=ACMRT origin/${{ github.event.pull_request.base.ref }} HEAD -- '*.py' | uniq | jq -R -s -c 'split("\n")[:-1]' | jq -r '.[] | ("./" + .)' | jq -R -r -s -c 'split("\n")[:-1] | join(" ")')" >>$GITHUB_OUTPUT

      - name: Print files to be scanned
        run: echo ${{ steps.set-python-files.outputs.pythonfiles }}

  Code_Analysis:
    runs-on: ubuntu-latest
    needs: pythonFiles
    if: ${{ needs.pythonFiles.outputs.pythonfiles != '' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x' # Specify your desired Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint radon pyflakes bandit vulture

      - name: Analyze code
        run: |
          set -e
          echo "Analyzing files: ${{ needs.pythonFiles.outputs.pythonfiles }}"

          # Ensure the files list is not empty
          if [[ -z "${{ needs.pythonFiles.outputs.pythonfiles }}" ]]; then
            echo "No Python files detected for analysis."
            exit 0
          fi

          # Pylint analysis
          echo "Running Pylint..."
          pylint --disable=R,C --output-format=text ${{ needs.pythonFiles.outputs.pythonfiles }} > pylint_report.txt || echo "Pylint analysis failed."

          # Cyclomatic complexity analysis
          echo "Running Radon CC..."
          radon cc ${{ needs.pythonFiles.outputs.pythonfiles }} > cc_report.txt || echo "Radon analysis failed."

          # Boilerplate detection
          echo "Running Pyflakes..."
          pyflakes ${{ needs.pythonFiles.outputs.pythonfiles }} > pyflakes_report.txt || echo "Pyflakes analysis failed."

          # Security checks
          echo "Running Bandit..."
          bandit -r ${{ needs.pythonFiles.outputs.pythonfiles }} > bandit_report.txt || echo "Bandit analysis failed."

          # Unused code detection
          echo "Running Vulture..."
          vulture ${{ needs.pythonFiles.outputs.pythonfiles }} > vulture_report.txt || echo "Vulture analysis failed."

          echo "Analysis Complete. Reports generated."

      - name: Calculate code rating
        run: |
          set -e

          # Ensure reports exist and are non-empty
          if [[ ! -s pylint_report.txt || ! -s cc_report.txt || ! -s bandit_report.txt ]]; then
            echo "Error: One or more reports are missing or empty."
            exit 1
          fi

          # Extract scores with defaults
          pylint_score=$(grep "Your code has been rated at" pylint_report.txt | awk '{print $6}' || echo "0")
          avg_complexity=$(grep "Average complexity" cc_report.txt | awk '{print $3}' || echo "0")
          bandit_issues=$(grep -c "Issue:" bandit_report.txt || echo "0")

          # Debug logs
          echo "Pylint Score: $pylint_score"
          echo "Average Complexity: $avg_complexity"
          echo "Bandit Issues: $bandit_issues"

          # Validate inputs
          if [[ "$pylint_score" =~ ^[0-9]+([.][0-9]+)?$ ]] && [[ "$avg_complexity" =~ ^[0-9]+([.][0-9]+)?$ ]]; then
            if [[ $(echo "$pylint_score > 9" | bc -l) -eq 1 ]] && [[ $(echo "$avg_complexity < 5" | bc -l) -eq 1 ]] && [[ $bandit_issues -eq 0 ]]; then
              rating="★★★★★"
              rating_color="green"
              reason="Excellent Pylint score, low cyclomatic complexity, and no security issues."
            elif [[ $(echo "$pylint_score > 8" | bc -l) -eq 1 ]] && [[ $(echo "$avg_complexity < 10" | bc -l) -eq 1 ]] && [[ $bandit_issues -lt 5 ]]; then
              rating="★★★★"
              rating_color="green"
              reason="Good Pylint score, moderate complexity, and minor security issues."
            elif [[ $(echo "$pylint_score > 6" | bc -l) -eq 1 ]] && [[ $bandit_issues -lt 10 ]]; then
              rating="★★★"
              rating_color="yellow"
              reason="Moderate Pylint score with manageable security issues."
            else
              rating="★★"
              rating_color="red"
              reason="Poor quality code with high complexity and security issues."
            fi
          else
            rating="N/A"
            rating_color="red"
            reason="Failed to calculate due to invalid input values."
          fi

          # Output results
          echo "Code Rating: $rating ($reason)" > code_rating.txt
          echo "Rating Color: $rating_color" > rating_color.txt

          # Debug output
          echo "Code Rating: $rating ($reason)"
          echo "Rating Color: $rating_color"
      - name: Create PR comment
        uses: actions/github-script@v6
        with:
          token: ${{ secrets.PAT_GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const pylintReport = fs.readFileSync('pylint_report.txt', 'utf8');
            const ccReport = fs.readFileSync('cc_report.txt', 'utf8');
            const pyflakesReport = fs.readFileSync('pyflakes_report.txt', 'utf8');
            const banditReport = fs.readFileSync('bandit_report.txt', 'utf8');
            const vultureReport = fs.readFileSync('vulture_report.txt', 'utf8');
            const rating = fs.readFileSync('rating.txt', 'utf8').trim();
            const reason = fs.readFileSync('reason.txt', 'utf8').trim();
            const ratingColor = fs.readFileSync('rating_color.txt', 'utf8').trim();
            const changedFiles = `${{ needs.pythonFiles.outputs.pythonfiles }}`;

            const commentBody = `
              <table border="1">
                <tr>
                  <td style="background-color:${ratingColor};">**Rating:**</td>
                  <td>${rating}</td>
                </tr>
                <tr>
                  <td>**Code Quality (Pylint)**</td>
                  <td>${pylintReport.match(/Your code has been rated at ([0-9.]+)\/10\./)?.[1] || "N/A"}</td>
                </tr>
                <tr>
                  <td>**Complexity (Radon)**</td>
                  <td>${ccReport.match(/Average complexity: ([0-9.]+)/)?.[1] || "N/A"}</td>
                </tr>
                <tr>
                  <td>**Boilerplate Code**</td>
                  <td>${pyflakesReport.slice(0, 100)}</td>
                </tr>
                <tr>
                  <td>**Security Issues (Bandit)**</td>
                  <td>${banditReport.slice(0, 100)}</td>
                </tr>
              </table>

              **Summary:**
              ${rating} - ${reason}

              **Changed Files:**
              ${changedFiles}`;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });

      